using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Threading; //Add threading support
using System.Net; //Add network support
using System.Net.Sockets; //Add Sockets support

namespace MySecoundProgram
{
    public partial class Form1 : Form
    {
        //initialiserer variabler
        public string strRecievedUDPMessage;
        public string tbString = "000";
        public Boolean curStatusButton = false;
        public Boolean prevStatusButton = false;
        public Boolean curAlarmButton=false;
        public Boolean takePic= false;
        public string blobValue = "20";

        public void DoReciveUDP()
        {   
            //tar imot UDP melding
            UdpClient sock = new UdpClient(9050);
            IPEndPoint iep = new IPEndPoint(IPAddress.Any, 0);
            while (true)
            {
                Console.WriteLine("Ser etter UDP");
                try
                { //Recieve message as UDP
                    byte[] data = sock.Receive(ref iep);
                    //Convert Bytes to a ASCII String
                    strRecievedUDPMessage =
                        Encoding.ASCII.GetString(data, 0, data.Length);
                    Console.WriteLine(strRecievedUDPMessage);
                    //Cal the function UdpDataRecieved
                    this.Invoke(new EventHandler(this.UdpDataRecieved));
                }
                catch (Exception e) { }
            }
            sock.Close();
        }
        //This is only called by DoReciveUDP
        public void UdpDataRecieved(object sender, EventArgs e)
        { //Show the message in the form
            textBox2.Text = strRecievedUDPMessage;
            checkBoxChanged();
            csvStringChanged();
        }


        public Form1()
        {
            InitializeComponent();
        }

        private void csvStringChanged()
        {
            //når endringer er utfør kjører de fleste funksjoner denne funksjonen, som oppdaterer GUI etter data fra rPi
            string[] comands = textBox2.Text.Split(','); // Make a string table of comands
            if (comands[0] == "$SW")
            {
                progressBar1.Value = int.Parse(comands[4]);
                label4.Visible = true;
                label5.Visible = true;
                Console.WriteLine(comands[3]);
                   
                if (comands[3] == "True")
                {
                    label4.Visible = true;
                    label5.Visible = false;
                }
                else
                {
                    label5.Visible = true;
                    label4.Visible = false;
                }
                if((comands[6]=="1")&&(comands[2]=="True"))
                {
                    label6.Text = "Raspberry pi skrudde på alarmen";
                }
                else if((comands[6] == "1") && (comands[2] == "False"))
                {
                    label6.Text = "Raspberry pi skrudde av alarmen";
                }
                else if ((comands[6] == "2") && (comands[2] == "True"))
                {
                    label6.Text = "GUI skrudde på alarmen";
                }
                else if ((comands[6] == "2") && (comands[2] == "False"))
                {
                    label6.Text = "GUI skrudde av alarmen";
                }
                else if ((comands[6] == "3") && (comands[2] == "True"))
                {
                    label6.Text = "BLE skrudde på alarmen";
                }
                else if ((comands[6] == "3") && (comands[2] == "False"))
                {
                    label6.Text = "BLE skrudde av alarmen";
                }
                else
                    label6.Text = "Feil i siste endring comands[6]";
            }

        }

        private void button1_Click(object sender, EventArgs e)
        {
            checkBoxChanged();
        }

        private void checkBoxChanged()
        {
            //funksjoner som har med output å gjøre kjører denne funksjonen for å oppdatere og sende data til rPi
            textBox1.Text = "$LED";

            if (curAlarmButton == true)
            {
                textBox1.Text += ",1";
            }
            else
                textBox1.Text += ",0";

            if (curStatusButton == true)
            {
                textBox1.Text += ",1";
            }
            else
                textBox1.Text += ",0";

            //legger sliderens verdi til datastrengen med padding slik at den består av tre characters
            textBox1.Text += "," + tbString.PadLeft(3, '0');
            if (takePic == true)
            {
                textBox1.Text += ",1";
                takePic = false;
            }
            else
                textBox1.Text += ",0";

            textBox1.Text += "," + blobValue;

            byte[] data = new byte[1024];
            IPEndPoint ipep =
                    new IPEndPoint(IPAddress.Parse("128.39.113.151"), 9050);
            Socket server = new Socket(AddressFamily.InterNetwork, SocketType.Dgram,ProtocolType.Udp);
            string sendeString = textBox1.Text.ToString() + "\n";
            data = Encoding.ASCII.GetBytes(sendeString);
            server.SendTo(data, data.Length, SocketFlags.None, ipep);
            showValueLabels();
        } 

        private void button2_Click(object sender, EventArgs e)
        {
            checkBoxChanged();
            //csvStringChanged();
        }

        private void label2_Click(object sender, EventArgs e)
        {

        }
        private Thread workerThread;
        private void Form1_Load(object sender, EventArgs e)
        {
            workerThread = new Thread(this.DoReciveUDP);
            workerThread.IsBackground = true; //End
            // Start the worker thread.
            workerThread.Start();
            checkBoxChanged();
            Console.WriteLine("Startet tråd");

        }

        private void showValueLabels()
        {
            label3.Text = "Kamera er satt til: " + ((int)(trackBar1.Value*0.703)).ToString()+" grader";
        }

        private void trackBar1_Scroll(object sender, EventArgs e)
        {
            System.Windows.Forms.TrackBar myTB;
            myTB = (System.Windows.Forms.TrackBar)sender;
            tbString =myTB.Value.ToString();
            //myTB.Text = "Verdien er " + tbString;
            showValueLabels();
        }

        private void button1_Click_1(object sender, EventArgs e)
        {
            curStatusButton =!curStatusButton;
            checkBoxChanged();
        }

        private void button2_Click_1(object sender, EventArgs e)
        {
            curAlarmButton = !curAlarmButton;
            checkBoxChanged();
        }

        private void button3_Click(object sender, EventArgs e)
        {
            takePic = true;
            checkBoxChanged();
        }

        private void textBox3_TextChanged(object sender, EventArgs e)
        {
            blobValue = textBox3.Text;
            checkBoxChanged();
        }


    }
}
